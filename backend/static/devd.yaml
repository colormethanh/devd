openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  version: "1.0.0"
  title: Deved
  description: The API for the Deved Backend

#####
## Paths
#####
paths:
  ## Project routes
  /projects:
    get:
      tags:
        - Project
      summary: "Retrieve a list of all projects"
      description: "Fetches all projects in the system."
      responses:
        "200":
          description: "A list of porjects"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "500":
          $ref: "#/components/schemas/InternalError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
    post:
      summary: "Create a new project"
      description: "Creates a new project. User must be logged in and authenticated with a valid JWT."
      tags:
        - Project
      security:
        - bearerAuth: [] # JWT-based authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The name of the project"
                description:
                  type: string
                  description: "A brief description of the project"
      responses:
        "201":
          description: "Project successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation message"
                    example: "Project created successfully."
                  project_id:
                    type: string
                    description: "The unique ID of the newly created project"
                    example: "5f1d7f3e9b1a1b3b7d6d8f7e"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}:
    get:
      tags:
        - Project
      summary: "Retrieve a specific project by ID"
      description: "Fetches details of a specific project using its ID."
      parameters:
        - name: project_id
          in: path
          required: true
          description: "The ID of the project to retrieve"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "Details of the specified project"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "500":
          $ref: "#/components/schemas/InternalError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
    put:
      tags:
        - Project
      summary: "Update a specific project"
      description: "This route allows the user to update an existing project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"

      responses:
        "200":
          $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - Project
      summary: "Delete a specific project"
      description: "This route allows the user to delete a specific project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project to delete"
      responses:
        "204":
          description: "Project deleted successfully" # No content returned on success
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Pages Routes
  /projects/{project_id}/pages:
    get:
      tags:
        - Page
      summary: "Retrieve a list of pages for a specific project"
      description: "Fetches all pages associated with the specified project ID."
      parameters:
        - name: project_id
          in: path
          required: true
          description: "The ID of the project for which to retrieve pages"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "A list of pages associated with the specified project"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Page
      summary: "Create a new page in the project"
      description: "This route allows the user to create a new page within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project in which to create the page"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Page"
      responses:
        "201":
          description: "Page created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}/pages/{page_id}:
    get:
      tags:
        - Page
      summary: "Retrieve a specific page in the project"
      description: "This route allows the user to retrieve details of a specific page within a specified project."
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the page"
        - name: page_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PageId"
          description: "The ID of the page to retrieve"
      responses:
        "200":
          description: "Page retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - Page
      summary: "Update a specific page in the project"
      description: "This route allows the user to update details of a specific page within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the page"
        - name: page_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PageId"
          description: "The ID of the page to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Page"
      responses:
        "200":
          description: "Page updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - Page
      summary: "Delete a specific page in the project"
      description: "This route allows the user to delete a specific page within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the page"
        - name: page_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PageId"
          description: "The ID of the page to delete"
      responses:
        "204":
          description: "Page deleted successfully"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Component routes
  /projects/{project_id}/components:
    get:
      tags:
        - Component
      summary: "Retrieve all components in the project"
      description: "This route allows the user to retrieve a list of all components within a specified project."
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the components"
      responses:
        "200":
          description: "Components retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Component"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Component
      summary: "Create a new component in the project"
      description: "This route allows the user to create a new component within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project in which to create the component"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Component"
      responses:
        "201":
          description: "Component created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}/components/{component_id}:
    get:
      tags:
        - Component
      summary: "Retrieve a specific component in the project"
      description: "This route allows the user to retrieve detailed information about a specific component within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the component"
        - name: component_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ComponentId"
          description: "The ID of the component to retrieve"
      responses:
        "200":
          description: "Component details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - Component
      summary: "Update a specific component in the project"
      description: "This route allows the user to update details of a specific component within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the component"
        - name: component_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ComponentId"
          description: "The ID of the component to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Component"
      responses:
        "200":
          description: "Component updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - Component
      summary: "Delete a specific component from a project"
      description: "This route allows the user to delete a specific component from a project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project from which to delete the component"
        - name: component_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ComponentId"
          description: "The ID of the component to delete"
      responses:
        "204":
          description: "Component deleted successfully"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Task routes
  /projects/{project_id}/tasks:
    get:
      summary: "Retrieve tasks for a specific project"
      description: "Fetches the list of tasks for a specific project. The user must be authenticated with a valid JWT."
      tags:
        - Task
      security:
        - bearerAuth: [] # JWT-based authentication required
      parameters:
        - in: path
          name: project_id
          required: true
          description: "The unique ID of the project"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "A list of tasks retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Task
      summary: "Create a new task in the project"
      description: "This route allows the user to create a new task within the specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project to add the task to"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            example:
              name: "New Task"
              description: "Detailed task description"
              status: "inProgress"
              date_created: 1696883200000
              done_by_date: 1697488000000
              relevant_contents:
                [
                  [
                    { "type": "Page", "id": "page_id" },
                    { "type": "Component", "id": "component_id" },
                  ],
                ]
      responses:
        "201":
          description: "Task created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}/tasks/{task_id}:
    get:
      tags:
        - Task
      summary: "Retrieve a specific task in the project"
      description: "This route allows the user to retrieve detailed information about a specific task within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the task"
        - name: task_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
          description: "The ID of the task to retrieve"
      responses:
        "200":
          description: "Task details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - Task
      summary: "Update an existing task in the project"
      description: "This route allows the user to update an existing task within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the task"
        - name: task_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
          description: "The ID of the task to be updated"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            example:
              name: "Updated Task Name"
              description: "Updated task description"
              status: "done"
              date_completed: 1697558400000
              relevant_contents:
                [
                  [
                    { "type": "Page", "id": "page_id" },
                    { "type": "Component", "id": "component_id" },
                  ],
                ]
      responses:
        "200":
          description: "Task updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - Task
      summary: "Delete a specific task from a project"
      description: "This route allows the user to delete a specific task from a project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project from which to delete the task"
        - name: task_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/TaskId"
          description: "The ID of the task to delete"
      responses:
        "204":
          description: "Task deleted successfully"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Bug routes
  /projects/{project_id}/bugs:
    get:
      tags:
        - Bug
      summary: "Retrieve all bugs in the project"
      description: "This route allows the user to retrieve a list of all bugs associated with a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project whose bugs will be retrieved"
      responses:
        "200":
          description: "List of bugs retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bug"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Bug
      summary: "Create a new bug in the project"
      description: "This route allows the user to create a new bug within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project where the bug will be created"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bug"
      responses:
        "201":
          description: "Bug created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bug"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}/bugs/{bug_id}:
    get:
      tags:
        - Bug
      summary: "Retrieve a specific bug in the project"
      description: "This route allows the user to retrieve detailed information about a specific bug within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the bug"
        - name: bug_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/BugId"
          description: "The ID of the bug to retrieve"
      responses:
        "200":
          description: "Bug details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bug" # Returns the bug object
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - Bug
      summary: "Update a specific bug in the project"
      description: "This route allows the user to update details of a specific bug within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project containing the bug"
        - name: bug_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/BugId"
          description: "The ID of the bug to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bug"
      responses:
        "200":
          description: "Bug updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bug"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - Bug
      summary: "Delete a specific bug from a project"
      description: "This route allows the user to delete a specific bug from a project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project from which to delete the bug"
        - name: bug_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/BugId"
          description: "The ID of the bug to delete"
      responses:
        "204":
          description: "Bug deleted successfully" # No content returned on success
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## User routes
  /user/me:
    get:
      tags:
        - User
      summary: "Get user by ID"
      description: "Fetches detailed information about a specific user by their ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      responses:
        "200":
          description: "User information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - User
      summary: "Update a specific project"
      description: "This route allows the user to update an existing project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
          description: "The ID of the project to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: "Authenticate a user"
      description: "Validates user credentials and returns a JWT token if authentication is successful. The password is provided in plain text and checked against the hashed version stored in the database."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "The username of the user"
                password:
                  type: string
                  description: "The user's plain-text password"
              required:
                - username
                - password
      responses:
        "200":
          description: "successful login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: "Register a new user"
      description: "Allows a new user to creat an account."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "The user's desired email"
                password:
                  type: string
                  format: password
                  description: "The user's plain-text password. It will be hashed and salted before storage."
                email:
                  type: string
                  description: "The user's email address"
      responses:
        "201":
          description: "User successfully registered"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation message"
                  token:
                    $ref: "#/components/schemas/JWTToken"
                  user_id:
                    type: string
                    description: "The unique id of the newly registered user"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "409":
          description: "Conflict: Username or email is already in use"
        "500":
          $ref: "#/components/schemas/InternalError"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: "Logs out the user"
      description: "Logs out the authenticated user by removing JWTToken from client side"
      responses:
        "200":
          description: "User successfully logged out"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation of successful logout"
        "500":
          $ref: "#/components/schemas/InternalError"

#####
## Componentents
#####
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/UserId"
        email:
          type: string
          description: "The user's email address"
        username:
          type: string
          description: "The username of the user"
        salt:
          type: string
          description: "Salt used for hashing the password"
        hash:
          type: string
          description: "Hashed version of the user's password"
        projects:
          type: array
          description: "A list of projects the user is associated with"
          items:
            type: object
            properties:
              project:
                $ref: "#/components/schemas/ProjectId"
              role:
                type: string
                description: "User's access level to the project"
                enum: ["admin", "guest"]

    Project:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ProjectId"
        name:
          type: string
          description: "Name of the project"
        description:
          type: string
          description: "Description of the project"
        date_created:
          type: number
          format: int64
          description: "Timestamp (in miliseconds) when the project was created"
        # todo: Tokens?
        owner:
          $ref: "#/components/schemas/UserId"
        features:
          type: array
          items:
            type: string
          description: "A list of features the project contains"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentId"
          description: "A list of Ids to components the project contains"
        page:
          type: array
          items:
            $ref: "#/components/schemas/PageId"
          description: "A list of Ids to pages the project contains"
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskId"
          description: "A list of Ids to tasks the projects contains"
        guests:
          type: array
          items:
            $ref: "#/components/schemas/UserId"
          description: "A list of userids to users that have guest access to the project"
      required:
        - _id
        - description
        - date_created
    Task:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/TaskId"
        name:
          type: string
          description: "Name of the task"
        description:
          type: string
          description: "Description of the task"
        status:
          type: string
          enum:
            - backlog
            - inProgress
            - done
          description: "Current status of the task"
        date_created:
          type: number
          format: int64
          description: "Timestamp (in milliseconds) when the task was submitted"
        done_by_date:
          type: number
          format: int64
          nullable: true
          description: "Expected timestamp (in milliseconds) to complete the task or null"
        date_completed:
          type: number
          format: int64
          nullable: true
          description: "Timestamp (in milliseconds) when the task was completed or null"
        relevant_contents:
          type: array
          items:
            type: array
            items:
              oneOf:
                - $ref: "#/components/schemas/PageId"
                - $ref: "#/components/schemas/ComponentId"
                - $ref: "#/components/schemas/BugId"
            description: "Array of Ids to Pages, Components, and Bugs that are involved in the task"
      required:
        - id
        - name
        - status
        - date_submitted
    Page:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/PageId"
        name:
          type: string
          description: "Name of the page"
        description:
          type: string
          description: "Description of the page"
        date_created:
          type: number
          format: int64
          description: "Timestamp (in milliseconds) when the page was created"
        features:
          type: array
          items:
            type: string
          description: "Array of strings that describe features related to the page"
        project:
          $ref: "#/components/schemas/ProjectId"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentId"
          description: "Array of Ids to components related to the page"
        images:
          type: array
          nullable: true
          items:
            type: string
          description: "Array of image URLs or empty if no images"
        visibility:
          type: string
          enum:
            - private
            - public
          description: "Visibility tpe of page, either team only or open to the public, default is public"
      required:
        - _id
        - name
        - description
        - date_created
        - project
    Component:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ComponentId"
        name:
          type: string
          description: "Name of the component"
        description:
          type: string
          description: "Description of the component"
        snippet:
          type: string
          description: "Code snippet or relevant text for the component"
        children:
          type: array
          items:
            $ref: "#/components/schemas/ComponentId"
          description: "List of child component IDs"
        parents:
          type: array
          items:
            $ref: "#/components/schemas/ComponentId"
          description: "List of parent component Ids"
        status:
          type: string
          enum:
            - backlog
            - inProgress
            - done
          description: "Status of the component"
        images:
          type: array
          nullable: true
          items:
            type: string
          description: "Array of image URLs or empty/null if no images are associated"
        project:
          $ref: "#/components/schemas/ProjectId"
        visibility:
          type: string
          enum:
            - private
            - public
          description: "Visibility of the component"
      required:
        - _id
        - name
        - description
        - snippet
        - status
        - project
        - visibility
    Bug:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/BugId"
        name:
          type: string
          description: "Name of the bug"
        description:
          type: string
          description: "Detailed description of the bug"
        steps_to_reproduce:
          type: array
          items:
            type: string
          description: "Steps to reproduce the bug"
        status:
          type: string
          enum:
            - backlog
            - inProgress
            - done
          description: "Current status of the bug"
        date_created:
          type: number
          format: int64
          description: "Timestamp (in milliseconds) when the bug was created"
        date_completed:
          type: number
          format: int64
          nullable: true
          description: "Timestamp (in milliseconds) when the bug was resolved or null if unresolved"
        project:
          $ref: "#/components/schemas/ProjectId"
        page:
          $ref: "#/components/schemas/PageId"
        images:
          type: array
          nullable: true
          items:
            type: string
          description: "Array of image URLs related to the bug"
        errors:
          type: array
          items:
            type: string
          description: "Array of error messages or logs related to the bug"
      required:
        - name
        - description
        - steps_to_reproduce
        - status
        - date_submitted
        - project

    UserId:
      type: string
      description: "Unique Id of a User"
    ProjectId:
      type: string
      description: "Unique Id of a Project object"
    TaskId:
      type: string
      description: "Unique Id of a Task object"
    PageId:
      type: string
      description: "Unique Id of a Page object"
    ComponentId:
      type: string
      description: "Unique Id of a Component object"
    BugId:
      type: string
      description: "Unique ID of a component Object"

    InternalError:
      description: "Internal Server error"

    NotFoundError:
      description: "Content could not be found"

    UnauthorizedError:
      description: "Invalid login credentials or Missing web token"

    BadRequestError:
      description: "Bad request"

    ForbiddenError:
      description: "Access forbidden, unauthorized user"
    ## Is this enough?
    JWTToken:
      type: string
      description: "Access token used for authorization"

    ResponseObject:
      type: object
      description: "An object to standardize server responses"
      properties:
        message:
          type: string
        payload:
          type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
