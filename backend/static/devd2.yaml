openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  version: "1.0.0"
  title: Deved
  description: The API for the Deved Backend

paths:
  ## Project routes
  /projects:
    get:
      tags:
        - Project
      summary: "Retrieve a list of all projects"
      description: "Fetches all projects in the system."
      responses:
        "200":
          description: "A list of projects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Success"
                payload:
                  - _id: "project_id_1"
                    name: "Project A"
                    description: "Description A"
                  - _id: "project_id_2"
                    name: "Project B"
                    description: "Description B"
        "500":
          $ref: "#/components/schemas/InternalError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
    post:
      summary: "Create a new project"
      description: "Creates a new project. User must be logged in and authenticated with a valid JWT."
      tags:
        - Project
      security:
        - bearerAuth: [] # JWT-based authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The name of the project"
                description:
                  type: string
                  description: "A brief description of the project"
      responses:
        "201":
          description: "Project successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Project created successfully."
                payload:
                  project_id: "5f1d7f3e9b1a1b3b7d6d8f7e"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "500":
          $ref: "#/components/schemas/InternalError"

  /projects/{project_id}:
    get:
      tags:
        - Project
      summary: "Retrieve a specific project by ID"
      description: "Fetches details of a specific project using its ID."
      parameters:
        - name: project_id
          in: path
          required: true
          description: "The ID of the project to retrieve"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "Details of the specified project"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Success"
                payload:
                  _id: "project_id"
                  name: "Project A"
                  description: "Detailed project information"
        "500":
          $ref: "#/components/schemas/InternalError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
    put:
      tags:
        - Project
      summary: "Update a specific project"
      description: "This route allows the user to update an existing project by its ID. Requires JWT authentication."
      security:
        - bearerAuth: [] # Requires JWT token for authentication
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: "Project updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Project updated successfully"
                payload:
                  _id: "project_id"
                  name: "Updated Project"
                  description: "Updated project description"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Pages Routes
  /projects/{project_id}/pages:
    get:
      tags:
        - Page
      summary: "Retrieve a list of pages for a specific project"
      description: "Fetches all pages associated with the specified project ID."
      parameters:
        - name: project_id
          in: path
          required: true
          description: "The ID of the project for which to retrieve pages"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "A list of pages associated with the specified project"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Success"
                payload:
                  - _id: "page_id_1"
                    name: "Page 1"
                    description: "Description 1"
                  - _id: "page_id_2"
                    name: "Page 2"
                    description: "Description 2"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Page
      summary: "Create a new page in the project"
      description: "This route allows the user to create a new page within a specified project. Requires JWT authentication."
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ProjectId"
          description: "The ID of the project in which to create the page"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Page"
      responses:
        "201":
          description: "Page created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Page created successfully"
                payload:
                  _id: "page_id"
                  name: "New Page"
                  description: "Page description"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "403":
          $ref: "#/components/schemas/ForbiddenError"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## (Continue the same approach for the other routes)
  ## For each "200" success response, ensure it returns a "ResponseObject"
  ## and the original response is placed inside the "payload" field.
  ## Example for Tasks, Bugs, and Authentication routes provided below.

  /projects/{project_id}/tasks:
    get:
      tags:
        - Task
      summary: "Retrieve tasks for a specific project"
      description: "Fetches the list of tasks for a specific project."
      parameters:
        - in: path
          name: project_id
          required: true
          description: "The unique ID of the project"
          schema:
            $ref: "#/components/schemas/ProjectId"
      responses:
        "200":
          description: "A list of tasks retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Success"
                payload:
                  - _id: "task_id_1"
                    name: "Task 1"
                    description: "Task description 1"
                  - _id: "task_id_2"
                    name: "Task 2"
                    description: "Task description 2"
        "404":
          $ref: "#/components/schemas/NotFoundError"
        "500":
          $ref: "#/components/schemas/InternalError"

  ## Authentication routes
  /auth/login:
    post:
      tags:
        - Authentication
      summary: "Authenticate a user"
      description: "Validates user credentials and returns a JWT token if authentication is successful."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: "Successful login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "Login successful"
                payload:
                  token: "jwt_token_here"
        "400":
          $ref: "#/components/schemas/BadRequestError"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "500":
          $ref: "#/components/schemas/InternalError"

components:
  schemas:
    ResponseObject:
      type: object
      description: "Standardized server response object"
      properties:
        message:
          type: string
          description: "Response message indicating success or failure"
        payload:
          type: object
          description: "The actual data returned by the API"

    ## Other schemas remain the same, such as Project, Task, Bug, etc.

    ProjectId:
      type: string
      description: "Unique ID of a Project"
    TaskId:
      type: string
      description: "Unique ID of a Task"
    UserId:
      type: string
      description: "Unique ID of a User"
    PageId:
      type: string
      description: "Unique ID of a Page"
    ComponentId:
      type: string
      description: "Unique ID of a Component"
    BugId:
      type: string
      description: "Unique ID of a Bug"

    InternalError:
      description: "Internal server error"
    NotFoundError:
      description: "Resource not found"
    UnauthorizedError:
      description: "Invalid or missing authentication"
    BadRequestError:
      description: "Bad request"

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
